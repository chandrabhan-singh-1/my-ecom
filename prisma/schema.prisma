generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  SELLER
  STAFF
}

enum Quantity {
  HALFTROLLY
  TROLLY
  HALFDUMPER
  DUMPER
}

enum EntityType {
  PRODUCT
  STORE
  USER
}

enum OrderStatus {
  BOOKED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  password  String
  email     String   @unique
  number    String   @unique
  images    String[] @db.String
  bio       String?  @db.String
  role      UserRole
  location  Json

  addresses Address[]
  orders    Order[]
  cartItems Cart[]
  payments  Payment[]
  Store     Store[]

  reviewedBy Review[] @relation("Reviewed")
  reviewed   Review[] @relation("Reviewer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  state  String   @unique
  cities String[]
}

model Address {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  numbers  String[]
  emails   String[]
  house    String
  street   String
  area     String
  landmark String
  city     String
  district String
  state    String
  country  String   @default("INDIA")
  pincode  Int

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  storeId String? @db.ObjectId
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Store {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  manager  String
  emails   String[]
  numbers  String[]
  images   String[]
  coverUrl String?
  location Json

  ownerId String @db.ObjectId
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  products  Product[]
  addresses Address[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  info    String   @db.String
  images  String[]
  videos  String[]
  details Json
  unit    Json[]
  reviews Review[]

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  storeId String @db.ObjectId
  Store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  cartId String? @db.ObjectId
  Cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, info])
}

model Review {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  entityType  EntityType
  rating      Int
  title       String
  description String     @db.String
  images      String[]
  videos      String[]

  reviewerId String @db.ObjectId
  reviewer   User   @relation(name: "Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String? @db.ObjectId
  user   User?   @relation(name: "Reviewed", fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  storeId String? @db.ObjectId
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  productId String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  products Json[]
  orderAmt Float
  status   OrderStatus

  payment Payment?

  addId String  @db.ObjectId
  add   Address @relation(fields: [addId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentId String   @db.ObjectId
}

model Cart {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  products Product[]

  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String        @unique
  gateway       String
  paymentMethod String
  amount        Float
  status        PaymentStatus
  metadata      String        @db.String

  orderId String @unique @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
